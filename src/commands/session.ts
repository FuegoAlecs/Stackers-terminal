import { CommandHandler, CommandContext, CommandResult } from '../lib/CommandRouter'
import { commandRouter } from '../lib/CommandRouter'
import { sessionManager } from '../lib/SessionManager'

export const sessionCommand: CommandHandler = {
  name: 'session',
  description: 'Manage terminal session data (wallet, history, aliases, scripts)',
  usage: 'session <info|export|import|reset> [options]',
  aliases: ['sess'],
  
  execute: async (context: CommandContext): Promise<CommandResult> => {
    const { args, printer } = context; // Added printer

    if (!printer) {
      return { output: 'Error: Printer not available.', success: false };
    }
    
    if (args.length === 0) {
      const stats = sessionManager.getStats()
      return {
        output: `Terminal Session Commands:
  session info                    - Show session information and statistics
  session export                  - Export session data as JSON
  session import <json>           - Import session data from JSON
  session reset                   - Reset session to defaults
  session help                    - Show detailed help

üìä Current Session Stats:
  Command History: ${stats.historySize} commands
  Aliases: ${stats.aliasCount} shortcuts
  ABIs: ${stats.abiCount} loaded
  Scripts: ${stats.scriptCount} saved
  Last Updated: ${stats.sessionAge}

üí° Session data persists across browser sessions and includes all your
   terminal customizations, command history, and saved configurations.`,
        success: true
      }
    }
    
    const subcommand = args[0].toLowerCase()
    
    try {
      switch (subcommand) {
        case 'info': { // Added scope
          const session = sessionManager.getSession();
          const stats = sessionManager.getStats();
          
          await printer.print('üìä Terminal Session Information:\n');

          await printer.print('üîó Wallet Status:');
          const walletStatusData = [
            { key: 'Connected', value: session.wallet.isConnected ? '‚úÖ Yes' : '‚ùå No' },
            { key: 'Address', value: session.wallet.address || 'Not connected' },
            { key: 'Network', value: session.wallet.networkName || 'Unknown' },
            { key: 'Chain ID', value: session.wallet.chainId?.toString() || '' }
          ];
          await printer.printKeyValues(walletStatusData, { indent: 2 });

          await printer.print('\nüß† Smart Wallet:');
          const smartWalletData = [
            { key: 'Initialized', value: session.smartWallet.isInitialized ? '‚úÖ Yes' : '‚ùå No' },
            { key: 'Address', value: session.smartWallet.address || 'Not created' },
            { key: 'Gasless Mode', value: session.smartWallet.gasless ? '‚úÖ Enabled' : '‚ùå Disabled' },
            { key: 'Owner', value: session.smartWallet.owner || '' }
          ];
          await printer.printKeyValues(smartWalletData, { indent: 2 });

          await printer.print('\nüìö Data Summary:');
          const dataSummary = [
            { key: 'Command History', value: `${stats.historySize}/${1000} commands` },
            { key: 'Aliases', value: `${stats.aliasCount}/100 shortcuts` },
            { key: 'ABIs', value: `${stats.abiCount}/50 loaded` },
            { key: 'Scripts', value: `${stats.scriptCount}/50 saved` }
          ];
          await printer.printKeyValues(dataSummary, { indent: 2 });

          await printer.print('\n‚è∞ Session Details:');
          const sessionDetails = [
            { key: 'Last Updated', value: new Date(stats.lastUpdated).toLocaleString() },
            { key: 'Session Age', value: stats.sessionAge },
            { key: 'Storage', value: 'Browser localStorage' }
          ];
          await printer.printKeyValues(sessionDetails, { indent: 2 });

          await printer.print('\nüíæ Data Persistence:');
          await printer.print('  ‚úÖ Command history and aliases');
          await printer.print('  ‚úÖ Loaded ABIs and contract data');
          await printer.print('  ‚úÖ Saved scripts and workflows');
          await printer.print('  ‚úÖ Wallet connection preferences');
          await printer.print('  ‚úÖ Smart wallet configuration');

          await printer.print('\nüîß Management:');
          await printer.print('  ‚Ä¢ session export - Backup your session');
          await printer.print('  ‚Ä¢ session import - Restore from backup');
          await printer.print('  ‚Ä¢ session reset - Start fresh');

          return { output: '', success: true };
        } // Close case 'info'
        
        case 'export':
          const exportData = sessionManager.export()
          
          return {
            output: `üì¶ Session Export Data:

${exportData}

üí° Save this data to restore your session later:
  ‚Ä¢ Copy the JSON above
  ‚Ä¢ Save to a file for backup
  ‚Ä¢ Use "session import <json>" to restore
  
üîí Privacy Note:
  ‚Ä¢ Wallet addresses are included (no private keys)
  ‚Ä¢ Command history may contain sensitive data
  ‚Ä¢ Review before sharing`,
            success: true
          }
        
        case 'import':
          if (args.length < 2) {
            return {
              output: `Usage: session import <json_data>

Example:
  session import '{"wallet":{"isConnected":true,...},"aliases":{...},...}'

üí° Use "session export" to get the correct JSON format.
‚ö†Ô∏è  This will replace your current session data!`,
              success: false
            }
          }
          
          const jsonData = args.slice(1).join(' ')
          const importResult = sessionManager.import(jsonData)
          
          if (!importResult.success) {
            return {
              output: `‚ùå Failed to import session data.

Errors:
${importResult.errors.map(err => `  ‚Ä¢ ${err}`).join('\n')}

Expected format from "session export" command.`,
              success: false
            }
          }
          
          const newStats = sessionManager.getStats()
          
          return {
            output: `‚úÖ Session data imported successfully!

üìä Imported Data:
  Command History: ${newStats.historySize} commands
  Aliases: ${newStats.aliasCount} shortcuts
  ABIs: ${newStats.abiCount} loaded
  Scripts: ${newStats.scriptCount} saved

üîÑ Session has been restored from backup.
All your previous terminal customizations are now active.`,
            success: true
          }
        
        case 'reset':
          // Confirm reset (in a real implementation, you might want a confirmation)
          const beforeStats = sessionManager.getStats()
          sessionManager.reset()
          
          return {
            output: `üîÑ Session reset to defaults!

üìä Cleared Data:
  Command History: ${beforeStats.historySize} commands removed
  Aliases: ${beforeStats.aliasCount} shortcuts removed
  ABIs: ${beforeStats.abiCount} ABIs removed
  Scripts: ${beforeStats.scriptCount} scripts removed
  Wallet: Connection status cleared
  Smart Wallet: Configuration cleared

‚ú® Fresh Start:
  ‚Ä¢ All customizations have been removed
  ‚Ä¢ Built-in ABIs (ERC20, ERC721) will be reloaded
  ‚Ä¢ Terminal is ready for new configuration
  
üí° Use "session export" before reset to backup your data!`,
            success: true
          }
        
        case 'help':
          return {
            output: `Terminal Session Management Help:

OVERVIEW:
  The session system tracks and persists all your terminal data including
  wallet connections, command history, aliases, loaded ABIs, and saved scripts.
  This ensures your customizations persist across browser sessions.

COMMANDS:

1. SESSION INFO:
   session info
   
   Shows comprehensive session status including:
   ‚Ä¢ Wallet connection details
   ‚Ä¢ Smart wallet configuration
   ‚Ä¢ Data storage statistics
   ‚Ä¢ Last update timestamp

2. EXPORT SESSION:
   session export
   
   Creates a JSON backup of all session data:
   ‚Ä¢ Wallet connection state
   ‚Ä¢ Command history
   ‚Ä¢ All aliases and shortcuts
   ‚Ä¢ Loaded ABIs
   ‚Ä¢ Saved scripts
   
3. IMPORT SESSION:
   session import <json_data>
   
   Restores session from exported JSON:
   ‚Ä¢ Replaces current session data
   ‚Ä¢ Restores all customizations
   ‚Ä¢ Maintains data integrity

4. RESET SESSION:
   session reset
   
   Clears all session data:
   ‚Ä¢ Removes command history
   ‚Ä¢ Clears all aliases
   ‚Ä¢ Removes loaded ABIs (except built-ins)
   ‚Ä¢ Deletes saved scripts
   ‚Ä¢ Resets wallet connection state

SESSION DATA INCLUDES:

üîó Wallet Information:
  ‚Ä¢ Connection status
  ‚Ä¢ Wallet address
  ‚Ä¢ Network details
  ‚Ä¢ Chain ID

üß† Smart Wallet:
  ‚Ä¢ Initialization status
  ‚Ä¢ Smart wallet address
  ‚Ä¢ Gasless mode setting
  ‚Ä¢ Owner relationship

üìö Terminal Data:
  ‚Ä¢ Command history (last 1000 commands)
  ‚Ä¢ User-defined aliases (up to 100)
  ‚Ä¢ Loaded contract ABIs (up to 50)
  ‚Ä¢ Saved command scripts (up to 50)

STORAGE DETAILS:
  ‚Ä¢ Location: Browser localStorage
  ‚Ä¢ Persistence: Across browser sessions
  ‚Ä¢ Size Limits: Browser-dependent (~5-10MB)
  ‚Ä¢ Privacy: Local only, not transmitted

DATA PERSISTENCE:
  ‚úÖ Survives browser restart
  ‚úÖ Survives tab closure
  ‚úÖ Survives page refresh
  ‚ùå Cleared with browser data
  ‚ùå Not shared between browsers

BACKUP STRATEGY:
  1. Regular exports: session export
  2. Save JSON to file
  3. Version control for team sharing
  4. Import when needed: session import

PRIVACY CONSIDERATIONS:
  ‚Ä¢ Wallet addresses are stored (no private keys)
  ‚Ä¢ Command history may contain sensitive data
  ‚Ä¢ ABIs and scripts are stored locally
  ‚Ä¢ No data is transmitted to external servers

USE CASES:

1. Backup Before Major Changes:
   session export  # Save current state
   # Make changes...
   session import <backup>  # Restore if needed

2. Team Collaboration:
   session export  # Share terminal setup
   # Team member: session import <shared_data>

3. Fresh Start:
   session reset  # Clean slate
   # Reconfigure as needed

4. Migration:
   session export  # On old browser
   session import <data>  # On new browser

TROUBLESHOOTING:
  ‚Ä¢ "Import failed" ‚Üí Check JSON format
  ‚Ä¢ "Storage full" ‚Üí Clear browser data or reset session
  ‚Ä¢ "Data lost" ‚Üí Check if browser cleared localStorage
  ‚Ä¢ "Slow performance" ‚Üí Consider resetting large sessions

BEST PRACTICES:
  üí° Export session before major changes
  üí° Regular backups for important configurations
  üí° Review exported data before sharing
  üí° Use reset for fresh starts
  üí° Monitor session size for performance

TECHNICAL DETAILS:
  ‚Ä¢ Storage: localStorage API
  ‚Ä¢ Format: JSON with versioning
  ‚Ä¢ Validation: Schema checking on import
  ‚Ä¢ Limits: Browser localStorage quotas
  ‚Ä¢ Fallbacks: Graceful degradation

üí° Session management ensures your terminal setup is never lost!`,
            success: true
          }
        
        default:
          return {
            output: `Unknown session command: ${subcommand}

Available commands: info, export, import, reset, help

Examples:
  session info
  session export
  session reset`,
            success: false
          }
      }
    } catch (error) {
      return {
        output: `Session error: ${error instanceof Error ? error.message : 'Unknown error'}

Use "session help" for detailed usage information.`,
        success: false
      }
    }
  }
}

commandRouter.register(sessionCommand)